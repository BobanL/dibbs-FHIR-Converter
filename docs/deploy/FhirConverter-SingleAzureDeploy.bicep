/*
This is the single-touch deployment template for deploying the following:
* dependent resources (key vault and/or template storage account)
* infrastructure for the container app
* the container app running the FHIR-Converter service
*/

targetScope = 'subscription'

@minLength(3)
@maxLength(9)
@description('Used as the prefix to name provisioned resources where a custom name is not provided. Should be alphanumeric, at least 3 characters and no more than 9 characters.')
param serviceName string

@description('Location where the resources are deployed.')
@allowed([
  'australiaeast'
  'brazilsouth'
  'canadacentral'
  'canadaeast'
  'centralindia'
  'centralus'
  'chinanorth3'
  'eastasia'
  'eastus'
  'eastus2'
  'francecentral'
  'germanywestcentral'
  'japaneast'
  'koreacentral'
  'northcentralus'
  'northeurope'
  'norwayeast'
  'southafricanorth'
  'southcentralus'
  'southeastasia'
  'swedencentral'
  'switzerlandnorth'
  'uaenorth'
  'uksouth'
  'westeurope'
  'westus'
  'westus2'
  'westus3'
])
param location string

@description('Name of the resource group to deploy the resources to. If the resource group does not already exist, a new resource group will be provisioned with the given name or, if a name is not provided, with an autogenerated name based on serviceName.')
param resourceGroupName string = '${serviceName}-rg'

@description('Name of the container app environment. If a name is not provided, an autogenerated name based on serviceName will be used.')
param containerAppEnvName string = '${serviceName}-app-env'

@description('Name of the container app to run the FHIR Converter service. If a name is not provided, an autogenerated name based on serviceName will be used.')
param containerAppName string = '${serviceName}-app'

@description('The tag of the image to pull from MCR. To see available image tags, visit the [FHIR Converter MCR page](https://mcr.microsoft.com/en-us/product/healthcareapis/fhir-converter/tags)')
param containerAppImageTag string

@description('Minimum number of replicas for the container app.')
param minReplicas int = 0

@description('Maximum number of replicas for the container app.')
param maxReplicas int = 30

@description('CPU limit for the container app.')
param cpuLimit string = '1.0'

@description('Memory limit for the container app.')
param memoryLimit string = '2Gi'

@description('Timestamp used to generate unique deployment names. Defaults to utcNow.')
param timestamp string = utcNow('yyyyMMddHHmmss')

@description('Set to true to enable deployment of and integration with a storage account for custom templates.')
param enableTemplateStoreIntegration bool = false

@description('Name of storage account containing custom templates. If a name is not provided and enableTemplateStoreIntegration is true, an autogenerated name based on serviceName will be used.')
param templateStorageAccountName string = '${serviceName}templatestorage'

@description('Name of storage account container containing custom templates. If a name is not provided and enableTemplateStoreIntegration is true, an autogenerated name based on serviceName will be used.')
param templateStorageAccountContainerName string = '${serviceName}templatecontainer'

@description('If set to true, Application Insights logs and metrics collection will be enabled for the container app.')
param enableApplicationInsights bool = true

@description('Name of the key vault to hold the application insights connection string as a secret. If a name is not provided, an autogenerated name based on serviceName will be used.')
param keyVaultName string = '${serviceName}-kv'

@description('Name of the user-assigned managed identity to be deployed for accessing the key vault. If a name is not provided, an autogenerated name based on serviceName will be used.')
param keyVaultUserAssignedIdentityName string = '${serviceName}-kv-identity'

@description('If set to true, security requirements will be enabled on the API endpoint. This is strongly recommended.')
param securityEnabled bool = false

@description('Audiences for the api authentication.')
param securityAuthenticationAudiences array = []

@description('Authority for the api authentication.')
param securityAuthenticationAuthority string = ''

var deploymentTemplateVersion = '1'

resource resourceGroup 'Microsoft.Resources/resourceGroups@2020-06-01' = {
  name: resourceGroupName
  location: location
  tags: {
    fhirConverterDeploymentTemplateVersion: deploymentTemplateVersion
  }
}

// Deploy a keyVault if it is needed to store the application insights connection string secret
var deployKeyVault = enableApplicationInsights

// Deploy key vault and/or template storage account as required
module dependentResourceDeploy 'Deploy-DependentResources.bicep' = if (enableTemplateStoreIntegration || deployKeyVault) {
  name: 'dependentResourceDeploy_${timestamp}'
  scope: resourceGroup
  params: {
    location: location
    deployTemplateStore: enableTemplateStoreIntegration
    templateStorageAccountName: templateStorageAccountName
    templateStorageAccountContainerName: templateStorageAccountContainerName
    deployKeyVault: deployKeyVault
    keyVaultName: keyVaultName
    keyVaultUserAssignedIdentityName: keyVaultUserAssignedIdentityName
  }
}

// Deploy the infrastructure for the container app
module convertInfrastructureDeploy 'Deploy-Infrastructure.bicep' = {
  name: 'convertInfrastructureDeploy_${timestamp}'
  scope: resourceGroup
  params: {
    location: location
    envName: containerAppEnvName
    deployApplicationInsights: enableApplicationInsights
    keyVaultName: keyVaultName
  }
}

// Deploy the container app
module fhirConverterDeploy 'Deploy-FhirConverterService.bicep' = {
  name: 'fhirConverterDeploy_${timestamp}'
  scope: resourceGroup
  params: {
    location: location
    imageTag: containerAppImageTag
    appName: containerAppName
    envName: convertInfrastructureDeploy.outputs.containerAppEnvironmentName
    minReplicas: minReplicas
    maxReplicas: maxReplicas
    cpuLimit: cpuLimit
    memoryLimit: memoryLimit
    securityEnabled: securityEnabled
    securityAuthenticationAudiences: securityAuthenticationAudiences
    securityAuthenticationAuthority: securityAuthenticationAuthority
    templateStorageAccountName: enableTemplateStoreIntegration ? dependentResourceDeploy.outputs.templateStorageAccountName : ''
    templateStorageAccountContainerName: enableTemplateStoreIntegration ? dependentResourceDeploy.outputs.templateStorageAccountContainerName : ''
    keyVaultName: deployKeyVault ? dependentResourceDeploy.outputs.keyVaultName : ''
    keyVaultUAMIName: deployKeyVault ? dependentResourceDeploy.outputs.keyVaultUAMIName : ''
    applicationInsightsUAMIName: enableApplicationInsights ? convertInfrastructureDeploy.outputs.applicationInsightsUAMIName: ''
    applicationInsightsConnectionStringSecretName: enableApplicationInsights ? convertInfrastructureDeploy.outputs.applicationInsightsConnStringSecretName : ''
    containerAppEnvironmentId: convertInfrastructureDeploy.outputs.containerAppEnvironmentId
  }
  dependsOn: [
    dependentResourceDeploy
    convertInfrastructureDeploy
  ]
}

output fhirConverterApiEndpoint string = fhirConverterDeploy.outputs.containerAppFQDN
output resourceGroupName string = resourceGroup.name
